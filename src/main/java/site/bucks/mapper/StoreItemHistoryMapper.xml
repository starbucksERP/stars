<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="site.bucks.mapper.StoreItemHistoryMapper">
<!-- 지점 주문 개수 출력 -->
	<select id="numQty" resultType="OrderNum">
		select * from order_num
	</select>
	<update id="numQtyPlus" >
		update order_num set ORDER_NUM_QTY=ORDER_NUM_QTY+1 where store_id=#{storeId}
	</update>
	<update id="numQtyInit">
		update order_num set ORDER_NUM_QTY=0
	</update>
	<insert id="orerNumInsertStore">
		insert into order_num values(concat(store_number_seq.nextval,SUBSTR(#{storePhone},0,3)), 0)
	</insert>

<!-- 지점에서 발주 입력시 	+  지점에서 입고 확인시 storeItemHistory 테이블에서 일어나는 일련의 메소드 -->
	<!-- store_item_history : 지점 발주 테이블 (주체 :order) -->
	<insert id="insertSIH" parameterType="OrderItem">
		insert into store_item_history values(store_history_seq.nextval, #{storeId}, #{requestNum}, #{itemNum}, (select item_name from item where item_num=#{itemNum}), #{requestState}, #{orderQty}, sysdate)
	</insert>
<!-- 지점에서 발주 입력시 -->	

	<!-- 발주 취소요청(상태만 취소로 변환)  -->
	<update id="updateCancelStoreOrder" parameterType="OrderItem">
		update store_item_history set item_state=#{requestState} where request_num=#{requestNum}
	</update>

	<!-- itemName으로 정보 찾기  -->
	<select id="searchItem" resultType="item">
		select * from item where item_name=#{itemName}
	</select>
	
	<!-- 카테고리를 통해 item 찾기  -->
	<select id="searchItems" resultType="string">
		select item_name from item where item_num like #{category}||'%' and item_num like '_'||#{subCategory}||'%'
	</select>



	
<!-- 지점에서 취소 요청시 storeItemHistory 테이블에서 일어나는 일련의 메소드 -->
	<!-- store_item_history : 지점에서 취소 요청시 기록상태 변화 
		selectReciptRequest sql이용하여 상태 10인지 확인 -->
	<!-- <update id="updateCancelProcess" parameterType="OrderItem">
		update store_item_history set item_state=99 where request_num=#{requestNum}
	</update> -->
<!-- 지점에서 취소 요청시 storeItemHistory 테이블에서 일어나는 일련의 메소드 -->
	


	

</mapper>